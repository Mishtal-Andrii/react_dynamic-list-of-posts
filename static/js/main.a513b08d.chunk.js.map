{"version":3,"sources":["components/User.tsx","components/Comment.tsx","components/CommentList.tsx","components/Post.tsx","components/PostList.tsx","api/api.ts","App.tsx","index.tsx"],"names":["User","user","name","email","address","street","suite","city","className","Comment","comment","scope","body","CommentList","commentsList","map","key","id","Post","post","title","PostList","listOfPost","API_URL","getData","url","a","fetch","response","json","App","useState","posts","setPosts","isLoading","setLoading","searchValue","setSearch","showPosts","Promise","all","loadedPosts","loadedUsers","loadedComments","preparedPosts","find","person","userId","filter","postId","filteredPosts","useMemo","includes","trim","length","type","placeholder","value","onChange","event","target","onClick","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a513b08d.chunk.js","sourcesContent":["import React, { FC } from 'react';\n\ninterface Props {\n  user: User;\n}\n\nexport const User: FC<Props> = ({ user }) => {\n  const { name, email } = user;\n  const { street, suite, city } = user.address;\n\n  return (\n    <ul className=\"list-group\">\n      <li className=\"list-group-item\">{name}</li>\n      <li className=\"list-group-item\">{email}</li>\n      <li className=\"list-group-item\">{street}</li>\n      <li className=\"list-group-item\">{suite}</li>\n      <li className=\"list-group-item\">{city}</li>\n    </ul>\n  );\n};\n","import React, { FC } from 'react';\n\ninterface Props {\n  comment: Comment;\n}\n\nexport const Comment: FC<Props> = ({ comment }) => (\n\n  <table className=\"table table-bordered\">\n    <thead>\n      <tr>\n        <th scope=\"col\">Name</th>\n        <th scope=\"col\">Email</th>\n        <th scope=\"col\">Body</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td>{comment.name}</td>\n        <td>{comment.email}</td>\n        <td>{comment.body}</td>\n      </tr>\n    </tbody>\n  </table>\n);\n","import React, { FC } from 'react';\nimport { Comment } from './Comment';\n\ninterface Props {\n  commentsList: Comment[];\n}\n\nexport const CommentList: FC<Props> = ({ commentsList }) => (\n  <div className=\"border border-success box\">\n    {commentsList.map(comment => (\n      <Comment key={comment.id} comment={comment} />\n    ))}\n  </div>\n);\n","import React, { FC } from 'react';\nimport { User } from './User';\nimport { CommentList } from './CommentList';\n\ninterface Props {\n  post: ListofPost;\n}\n\nexport const Post: FC<Props> = ({ post }) => {\n  const {\n    title,\n    body,\n    user,\n    comment,\n  } = post;\n\n  return (\n    <>\n      <h2>{title}</h2>\n      <p>{body}</p>\n      <div>\n        <User user={user} />\n      </div>\n      <CommentList commentsList={comment} />\n    </>\n  );\n};\n","import React, { FC } from 'react';\nimport { Post } from './Post';\n\ninterface Props {\n  listOfPost: ListofPost[];\n}\n\nexport const PostList: FC<Props> = ({ listOfPost }) => (\n  <div>\n    {listOfPost.map(post => (\n      <Post key={post.id} post={post} />\n    ))}\n  </div>\n);\n","const API_URL = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/';\n\nasync function getData<T>(url: string): Promise<T> {\n  const response = await fetch(url);\n\n  return response.json();\n}\n\nexport const loadPosts = (): Promise<Post[]> => {\n  return getData<Post[]>(`${API_URL}/posts.json`);\n};\n\nexport const loadUsers = (): Promise<User[]> => {\n  return getData<User[]>(`${API_URL}/users.json`);\n};\n\nexport const loadComments = (): Promise<Comment[]> => {\n  return getData<Comment[]>(`${API_URL}/comments.json`);\n};\n","import React, {\n  FC, useState, ChangeEvent, useMemo,\n} from 'react';\nimport { PostList } from './components/PostList';\nimport './App.css';\nimport { loadPosts, loadUsers, loadComments } from './api/api';\n\nconst App: FC = () => {\n  const [posts, setPosts] = useState<ListofPost[]>([]);\n  const [isLoading, setLoading] = useState(false);\n  const [searchValue, setSearch] = useState('');\n\n  const showPosts = async () => {\n    setLoading(true);\n\n    const [loadedPosts, loadedUsers, loadedComments] = await Promise\n      .all([loadPosts(), loadUsers(), loadComments()]);\n\n    const preparedPosts = loadedPosts.map((post) => ({\n      ...post,\n      user: loadedUsers.find((person) => person.id === post.userId) as User,\n      comment: loadedComments.filter((comment) => post.id === comment.postId) as Comment[],\n    }));\n\n    setPosts(preparedPosts);\n    setLoading(false);\n  };\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { target } = event;\n\n    setSearch(target.value);\n  };\n\n  const filteredPosts = useMemo(() => posts.filter(post => post.title.includes(searchValue.trim())\n    || post.body.includes(searchValue.trim())),\n  [searchValue, posts]);\n\n  return (\n    !posts.length\n      ? (\n        <button\n          className=\"btn btn-primary button\"\n          type=\"button\"\n          onClick={showPosts}\n          disabled={isLoading}\n        >\n          {isLoading ? 'Loading...' : 'Start load posts'}\n        </button>\n      )\n      : (\n        <div className=\"container\">\n          <h1>Dynamic list of posts</h1>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Search\"\n            value={searchValue}\n            onChange={handleChange}\n          />\n          <PostList listOfPost={filteredPosts} />\n        </div>\n      )\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}